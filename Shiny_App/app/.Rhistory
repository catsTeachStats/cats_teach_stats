ml <- read.dta("http://www.ats.ucla.edu/stat/data/hsbdemo.dta")
ml <- read.data("http://www.ats.ucla.edu/stat/data/hsbdemo.dta")
require(foreign)
require(nnet)
require(ggplot2)
require(reshape2)
ml <- read.data("http://www.ats.ucla.edu/stat/data/hsbdemo.dta")
ml <- read.dta("http://www.ats.ucla.edu/stat/data/hsbdemo.dta")
head(ml)
function(x) c(M = mean(x), SD = sd(x)))))
with(ml, do.call(rbind, tapply(write, prog,
function(x) c(M = mean(x), SD = sd(x)))))
summary(ml$prog)
ml$prog2 <- relevel(ml$prog, ref = "academic")
test <- multinom(prog2 ~ ses + write, data = ml)
summary(ml$prog2)
summary(ml$ses)
summary(ml$write)
1800*2
3600*12
4018*12
25*3.14
.95*85
46*30
257*30
cite("nlme")
citation("nlme")
require(network)
require(sna)
require(ggnet)
require(ergm)
citation("MASS")
rm(list=ls())
100/12
17*2
veg.data <- read.delim ('http://www.davidzeleny.net/anadat-r/data-download/vltava-spe.txt', row.names = 1)
head(veg.data)
View(veg.data)
a
a$name
b<- a[a$bin.yes.no==1,]
b<- droplevels(b)
a[column, row]
a[3,2]
a[,2]
a[3,]
b<- a[(a$bin.yes.no==1 & a$flower.shape=="cup"),]
8*60
480*60
28800/1609
require(pwr)
install.packages("pwr")
require(pwr)
pwr.anova.test(f=0.4, k=4, n=10, sig.level=0.05)
pwr.anova.test(k=4, n=10, sig.level=0.05)
pwr.anova.test(f=0.4, k=4, n=20, sig.level=0.05)
pwr.anova.test(f=0.4, k=4, n=22, sig.level=0.05)
pwr.anova.test(f=0.4, k=4, n=25, sig.level=0.05)
pwr.anova.test(f=0.4, k=4, n=30, sig.level=0.05)
pwr.anova.test(f=0.4, k=3, n=30, sig.level=0.05)
pwr.anova.test(f=0.4, k=2, n=30, sig.level=0.05)
pwr.anova.test(f=0.4, k=2, power=0.9, sig.level=0.05)
pwr.anova.test(f=0.4, k=4, power=0.9, sig.level=0.05)
getwd()
library(shiny)
#ui<- fluidPage()
#server<- function(input, output){}
#shinyApp(ui=ui, server=server)
#next step
if (interactive()){
ui <- fluidPage(
#titlePanel("Cats teach Stats",img(src = "kitty2.png", height = 100)),
titlePanel(title=div(img(src="kitty2.png", height=100), "Cats teach Stats!", img(src="kitty3.jpg", height=100))),
#titlePanel("Cats teach Stats"),
sidebarLayout(
sidebarPanel(numericInput("LR", "Left to Right Boops", 0, min=0, max=50),
#verbatimTextOutput("value1"),
numericInput("RL", "Right to Left Boops", 0, min=0, max=50),
#Total<- sum(v1,v2),
h4("Boop Sum"),
h4(textOutput("sum")),
h4("Proportion of Left to Right Boops"),
h4(textOutput("propLR")),
h4("Proportion of Right to Left Boops"),
h4(textOutput("propRL")),
h4("Binomial Test: Is there a RL or LR preference by WPJ?"),
h4("paw-value ="),
h4(textOutput("test")),
width=5
),
mainPanel(
plotOutput("boopplot"),
width=5
))
)
server<- function(input, output){
output$sum<- renderText({input$LR + input$RL})
output$propLR<- renderText({input$LR/(input$LR+input$RL)})
output$propRL<- renderText({input$RL/(input$LR+input$RL)})
#boops<- c(input$LR, input$RL)
#stat<-(binom.test(x=boops,p=0.5))
output$test<- renderText({
boops<- c(input$LR, input$RL)
stat<-(binom.test(x=boops,p=0.5))
#boops<- c(input$LR, input$RL)
#total<- sum(input$LR+input$RL)
stat$p.value
})
#boops<-c(input$LR, input$RL)
#boops<- c(5,10)
output$boopplot<- renderPlot({
boops<- c(input$LR, input$RL)
barplot(boops,
main = "Count of Boops",
names.arg = c("L-to-R", "R-to-L"),
xlab = "Direction",
ylab = "Count",
col= c("#56B4E9", "#009E73")
)
})
}
shinyApp(ui=ui, server=server)}
runApp()
devtools::install_github("swirldev/swirlify")
install.packages(c("swirl", "swirlify"))
install.packages("hms")
library(hms)
install.packages("rlang")
> install.packages("devtools")
install.packages("devtools")
library(devtools)
version
install.packages(c("swirl", "swirlify"))
library(swirlify)
new_lesson("My Lesson", "My Course")
library(swirl)
rm(list=ls())
swirl()
swirl()
bye()
install.packages(ggplot2)
install.packages("ggplot2")
install.packages("tidyr")
install.packages(c("swirl", "swirlify"))
install.packages(c("swirl", "swirlify"))
library(swirl)
swirl()
5+7
x<- 5+7
x
x-3
3
info()
skip()
skip()
skip()
?c
z
skip()
skip()
skip()
my_sqrt
skip()
my_div
a<- c(1,2,3,4)
c(1,2,3,4)+ c(0,10)
main()
main()
1
main()
swirl()
2
main()
install_course("Data Analysis")
bye()
sirl()
swirl()
?InstallCourses
install_course("Data_Analysis")
rm(list=ls())
binom.test(c(2,8),10,0.5)
.03*6
.23/.03
shiny::runApp('GitHub/cats_teach_stats/Shiny_App')
runApp('GitHub/cats_teach_stats/Shiny_App')
swirl()
require(swirl)
swirl()
rightToLeft<- 24
leftToRight<- 15
get_current_lesson()
require(swirlify)
get_current_lesson()
demo_lesson()
nxt()
nxt()
uninstall_lessons()
setwd("~/GitHub/cats_teach_stats/Shiny_App/app")
shiny::runApp()
